# name: Mogua Backend CI/CD Pipeline

# on:
#   push:
#     branches: ["main"]
#   pull_request:
#     branches: ["main"]

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read

#     steps:
#       - uses: actions/checkout@v4

#       - name: Set up JDK 17
#         uses: actions/setup-java@v4
#         with:
#           java-version: "17"
#           distribution: "temurin"

#       - name: Setup Gradle
#         uses: gradle/actions/setup-gradle@v4

#       - name: Grant execute permission for gradlew
#         run: chmod +x gradlew

#       - name: Create application.properties
#         run: |
#           mkdir -p src/main/resources

#           # DB 설정
#           echo "spring.datasource.url=jdbc:mysql://${{ secrets.MYSQL_HOST }}:3306/mogua" >> src/main/resources/application.properties
#           echo "spring.datasource.username=${{ secrets.MYSQL_USERNAME }}" >> src/main/resources/application.properties
#           echo "spring.datasource.password=${{ secrets.MYSQL_PASSWORD }}" >> src/main/resources/application.properties
#           echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application.properties
#           echo "spring.jpa.hibernate.ddl-auto=update" >> src/main/resources/application.properties
#           echo "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect" >> src/main/resources/application.properties

#           # AWS S3 설정
#           echo "cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY }}" >> src/main/resources/application.properties
#           echo "cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_KEY }}" >> src/main/resources/application.properties
#           echo "cloud.aws.region.static=ap-northeast-2" >> src/main/resources/application.properties
#           echo "cloud.aws.s3.bucket=mogua" >> src/main/resources/application.properties

#           # Kakao 설정
#           echo "kakao.apikey=${{ secrets.KAKAO_APIKEY }}" >> src/main/resources/application.properties
#           echo "kakao.redirect-uri=${{ secrets.KAKAO_REDIRECT_URI }}" >> src/main/resources/application.properties

#           #jwt 설정
#           echo "jwt.secret.key=${{ secrets.JWT_SECRET_KEY }}" >> src/main/resources/application.properties

#           # server 설정
#           echo "server.address=0.0.0.0" >> src/main/resources/application.properties
#           echo "server.port=8080" >> src/main/resources/application.properties

#       - name: 빌드하기
#         run: |
#           ./gradlew clean
#           ./gradlew bootJar -x test
#           # 빌드 결과 확인
#           ls -la build/libs/
#           # 결과물 복사
#           cp build/libs/*.jar ./mogua-server.jar || echo "JAR 파일이 없습니다"
#           ls -la ./mogua-server.jar || echo "mogua-server.jar 파일이 생성되지 않았습니다"

#       - name: 빌드된 파일 이름 변경하기
#         run: mv ./build/libs/*.jar ./mogua-server.jar

#       - name: SCP로 EC2에 빌드된 파일 전송하기
#         uses: appleboy/scp-action@v0.1.7
#         with:
#           host: ${{ secrets.EC2_HOST }} # EC2 호스트 주소
#           username: ec2-user # EC2 사용자 이름
#           key: ${{ secrets.EC2_SSH_KEY }} # EC2 비공개 키
#           source: mogua-server.jar # 빌드된 JAR 파일 경로
#           target: /home/ec2-user/app # EC2 상의 배포될 폴더

#       - name: SSH로 EC2에 접속하여 서버 재시작하기
#         uses: appleboy/ssh-action@v1.0.3
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ec2-user
#           key: ${{ secrets.EC2_SSH_KEY }}
#           script_stop: true
#           script: |
#             mkdir -p /home/ec2-user/app
#             cd /home/ec2-user/app
#             sudo fuser -k -n tcp 8080 || true  # 포트 8080에 바인딩된 기존 프로세스 종료
#             nohup java -jar mogua-server.jar > ./mogua-server.log 2>&1 &  # 새 JAR 파일 실행
#             echo "mogua 서버가 재시작되었습니다. 로그 확인: tail -f /home/ec2-user/app/mogua-server.log"
